{"ast":null,"code":"import axios from \"axios\";\nimport toast from \"react-hot-toast\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000\",\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add loading indicator for long requests\n  if (config.timeout > 5000) {\n    toast.loading(\"Loading data...\", {\n      id: \"loading\"\n    });\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  // Dismiss loading toast\n  toast.dismiss(\"loading\");\n  return response;\n}, error => {\n  // Dismiss loading toast\n  toast.dismiss(\"loading\");\n\n  // Handle different error types\n  if (error.response) {\n    // Server responded with error status\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 400:\n        toast.error(data.error || \"Bad request\");\n        break;\n      case 401:\n        toast.error(\"Unauthorized access\");\n        break;\n      case 403:\n        toast.error(\"Access forbidden\");\n        break;\n      case 404:\n        toast.error(data.error || \"Resource not found\");\n        break;\n      case 429:\n        toast.error(\"Too many requests. Please try again later.\");\n        break;\n      case 500:\n        toast.error(\"Server error. Please try again later.\");\n        break;\n      default:\n        toast.error(data.error || \"An error occurred\");\n    }\n  } else if (error.request) {\n    // Network error\n    toast.error(\"Network error. Please check your connection.\");\n  } else {\n    // Other error\n    toast.error(\"An unexpected error occurred\");\n  }\n  return Promise.reject(error);\n});\n\n// API methods\nexport const hashtagAPI = {\n  // Get all hashtags\n  getHashtags: (params = {}) => api.get(\"/api/hashtags\", {\n    params\n  }),\n  // Get trending hashtags\n  getTrending: (platform, limit = 20) => api.get(\"/api/hashtags/trending\", {\n    params: {\n      platform,\n      limit\n    }\n  }),\n  // Get hashtag by category\n  getByCategory: (category, platform) => api.get(`/api/hashtags/category/${category}`, {\n    params: {\n      platform\n    }\n  }),\n  // Get specific hashtag\n  getHashtag: (hashtag, platform) => api.get(`/api/hashtags/${hashtag}`, {\n    params: {\n      platform\n    }\n  }),\n  // Get hashtag time series\n  getTimeSeries: (hashtag, platform, days = 7) => api.get(`/api/hashtags/${hashtag}/timeseries`, {\n    params: {\n      platform,\n      days\n    }\n  }),\n  // Search hashtags\n  search: (query, platform, limit = 20) => api.get(`/api/hashtags/search/${query}`, {\n    params: {\n      platform,\n      limit\n    }\n  }),\n  // Get statistics\n  getStats: () => api.get(\"/api/hashtags/stats/overview\")\n};\nexport const socialMediaAPI = {\n  // Get Twitter trending\n  getTwitterTrending: (woeid = 1) => api.get(\"/api/social-media/twitter/trending\", {\n    params: {\n      woeid\n    }\n  }),\n  // Get YouTube trending\n  getYouTubeTrending: (regionCode = \"US\", maxResults = 50) => api.get(\"/api/social-media/youtube/trending\", {\n    params: {\n      regionCode,\n      maxResults\n    }\n  }),\n  // Get Twitter hashtag data\n  getTwitterData: (hashtag, count = 100) => api.get(`/api/social-media/twitter/${hashtag}`, {\n    params: {\n      count\n    }\n  }),\n  // Get YouTube hashtag data\n  getYouTubeData: (hashtag, maxResults = 50) => api.get(`/api/social-media/youtube/${hashtag}`, {\n    params: {\n      maxResults\n    }\n  }),\n  // Fetch and store hashtag data\n  fetchHashtagData: (hashtag, platforms = [\"twitter\", \"youtube\"]) => api.post(`/api/social-media/fetch/${hashtag}`, {\n    platforms\n  }),\n  // Compare hashtag across platforms\n  comparePlatforms: hashtag => api.get(`/api/social-media/compare/${hashtag}`)\n};\nexport const analyticsAPI = {\n  // Get trend analysis\n  getTrends: (hashtag, platform, days = 30) => api.get(`/api/analytics/trends/${hashtag}`, {\n    params: {\n      platform,\n      days\n    }\n  }),\n  // Get predictions\n  getPredictions: (hashtag, platform) => api.get(`/api/analytics/predictions/${hashtag}`, {\n    params: {\n      platform\n    }\n  }),\n  // Get category analysis\n  getCategories: (platform, days = 7) => api.get(\"/api/analytics/categories\", {\n    params: {\n      platform,\n      days\n    }\n  }),\n  // Get platform comparison\n  getPlatformComparison: (days = 7) => api.get(\"/api/analytics/platforms/comparison\", {\n    params: {\n      days\n    }\n  }),\n  // Get sentiment analysis\n  getSentiment: (platform, category, days = 7) => api.get(\"/api/analytics/sentiment\", {\n    params: {\n      platform,\n      category,\n      days\n    }\n  }),\n  // Get growth analysis\n  getGrowth: (platform, category, days = 30) => api.get(\"/api/analytics/growth\", {\n    params: {\n      platform,\n      category,\n      days\n    }\n  })\n};\n\n// Health check\nexport const healthCheck = () => api.get(\"/api/health\");\nexport { api };","map":{"version":3,"names":["axios","toast","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","loading","id","error","Promise","reject","response","dismiss","status","data","hashtagAPI","getHashtags","params","get","getTrending","platform","limit","getByCategory","category","getHashtag","hashtag","getTimeSeries","days","search","query","getStats","socialMediaAPI","getTwitterTrending","woeid","getYouTubeTrending","regionCode","maxResults","getTwitterData","count","getYouTubeData","fetchHashtagData","platforms","post","comparePlatforms","analyticsAPI","getTrends","getPredictions","getCategories","getPlatformComparison","getSentiment","getGrowth","healthCheck"],"sources":["C:/Users/dogra/Documents/projects_Frontend/hashtag-analyzer/client/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000\",\r\n  timeout: 10000,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add loading indicator for long requests\r\n    if (config.timeout > 5000) {\r\n      toast.loading(\"Loading data...\", { id: \"loading\" });\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // Dismiss loading toast\r\n    toast.dismiss(\"loading\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Dismiss loading toast\r\n    toast.dismiss(\"loading\");\r\n\r\n    // Handle different error types\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      const { status, data } = error.response;\r\n\r\n      switch (status) {\r\n        case 400:\r\n          toast.error(data.error || \"Bad request\");\r\n          break;\r\n        case 401:\r\n          toast.error(\"Unauthorized access\");\r\n          break;\r\n        case 403:\r\n          toast.error(\"Access forbidden\");\r\n          break;\r\n        case 404:\r\n          toast.error(data.error || \"Resource not found\");\r\n          break;\r\n        case 429:\r\n          toast.error(\"Too many requests. Please try again later.\");\r\n          break;\r\n        case 500:\r\n          toast.error(\"Server error. Please try again later.\");\r\n          break;\r\n        default:\r\n          toast.error(data.error || \"An error occurred\");\r\n      }\r\n    } else if (error.request) {\r\n      // Network error\r\n      toast.error(\"Network error. Please check your connection.\");\r\n    } else {\r\n      // Other error\r\n      toast.error(\"An unexpected error occurred\");\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API methods\r\nexport const hashtagAPI = {\r\n  // Get all hashtags\r\n  getHashtags: (params = {}) => api.get(\"/api/hashtags\", { params }),\r\n\r\n  // Get trending hashtags\r\n  getTrending: (platform, limit = 20) =>\r\n    api.get(\"/api/hashtags/trending\", { params: { platform, limit } }),\r\n\r\n  // Get hashtag by category\r\n  getByCategory: (category, platform) =>\r\n    api.get(`/api/hashtags/category/${category}`, { params: { platform } }),\r\n\r\n  // Get specific hashtag\r\n  getHashtag: (hashtag, platform) =>\r\n    api.get(`/api/hashtags/${hashtag}`, { params: { platform } }),\r\n\r\n  // Get hashtag time series\r\n  getTimeSeries: (hashtag, platform, days = 7) =>\r\n    api.get(`/api/hashtags/${hashtag}/timeseries`, {\r\n      params: { platform, days },\r\n    }),\r\n\r\n  // Search hashtags\r\n  search: (query, platform, limit = 20) =>\r\n    api.get(`/api/hashtags/search/${query}`, { params: { platform, limit } }),\r\n\r\n  // Get statistics\r\n  getStats: () => api.get(\"/api/hashtags/stats/overview\"),\r\n};\r\n\r\nexport const socialMediaAPI = {\r\n  // Get Twitter trending\r\n  getTwitterTrending: (woeid = 1) =>\r\n    api.get(\"/api/social-media/twitter/trending\", { params: { woeid } }),\r\n\r\n  // Get YouTube trending\r\n  getYouTubeTrending: (regionCode = \"US\", maxResults = 50) =>\r\n    api.get(\"/api/social-media/youtube/trending\", {\r\n      params: { regionCode, maxResults },\r\n    }),\r\n\r\n  // Get Twitter hashtag data\r\n  getTwitterData: (hashtag, count = 100) =>\r\n    api.get(`/api/social-media/twitter/${hashtag}`, { params: { count } }),\r\n\r\n  // Get YouTube hashtag data\r\n  getYouTubeData: (hashtag, maxResults = 50) =>\r\n    api.get(`/api/social-media/youtube/${hashtag}`, { params: { maxResults } }),\r\n\r\n  // Fetch and store hashtag data\r\n  fetchHashtagData: (hashtag, platforms = [\"twitter\", \"youtube\"]) =>\r\n    api.post(`/api/social-media/fetch/${hashtag}`, { platforms }),\r\n\r\n  // Compare hashtag across platforms\r\n  comparePlatforms: (hashtag) =>\r\n    api.get(`/api/social-media/compare/${hashtag}`),\r\n};\r\n\r\nexport const analyticsAPI = {\r\n  // Get trend analysis\r\n  getTrends: (hashtag, platform, days = 30) =>\r\n    api.get(`/api/analytics/trends/${hashtag}`, { params: { platform, days } }),\r\n\r\n  // Get predictions\r\n  getPredictions: (hashtag, platform) =>\r\n    api.get(`/api/analytics/predictions/${hashtag}`, { params: { platform } }),\r\n\r\n  // Get category analysis\r\n  getCategories: (platform, days = 7) =>\r\n    api.get(\"/api/analytics/categories\", { params: { platform, days } }),\r\n\r\n  // Get platform comparison\r\n  getPlatformComparison: (days = 7) =>\r\n    api.get(\"/api/analytics/platforms/comparison\", { params: { days } }),\r\n\r\n  // Get sentiment analysis\r\n  getSentiment: (platform, category, days = 7) =>\r\n    api.get(\"/api/analytics/sentiment\", {\r\n      params: { platform, category, days },\r\n    }),\r\n\r\n  // Get growth analysis\r\n  getGrowth: (platform, category, days = 30) =>\r\n    api.get(\"/api/analytics/growth\", { params: { platform, category, days } }),\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = () => api.get(\"/api/health\");\r\n\r\nexport { api };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,iBAAiB;;AAEnC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,IAAIA,MAAM,CAACL,OAAO,GAAG,IAAI,EAAE;IACzBP,KAAK,CAACa,OAAO,CAAC,iBAAiB,EAAE;MAAEC,EAAE,EAAE;IAAU,CAAC,CAAC;EACrD;EACA,OAAOF,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACQ,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAK;EACZ;EACAlB,KAAK,CAACmB,OAAO,CAAC,SAAS,CAAC;EACxB,OAAOD,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACAf,KAAK,CAACmB,OAAO,CAAC,SAAS,CAAC;;EAExB;EACA,IAAIJ,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAM;MAAEE,MAAM;MAAEC;IAAK,CAAC,GAAGN,KAAK,CAACG,QAAQ;IAEvC,QAAQE,MAAM;MACZ,KAAK,GAAG;QACNpB,KAAK,CAACe,KAAK,CAACM,IAAI,CAACN,KAAK,IAAI,aAAa,CAAC;QACxC;MACF,KAAK,GAAG;QACNf,KAAK,CAACe,KAAK,CAAC,qBAAqB,CAAC;QAClC;MACF,KAAK,GAAG;QACNf,KAAK,CAACe,KAAK,CAAC,kBAAkB,CAAC;QAC/B;MACF,KAAK,GAAG;QACNf,KAAK,CAACe,KAAK,CAACM,IAAI,CAACN,KAAK,IAAI,oBAAoB,CAAC;QAC/C;MACF,KAAK,GAAG;QACNf,KAAK,CAACe,KAAK,CAAC,4CAA4C,CAAC;QACzD;MACF,KAAK,GAAG;QACNf,KAAK,CAACe,KAAK,CAAC,uCAAuC,CAAC;QACpD;MACF;QACEf,KAAK,CAACe,KAAK,CAACM,IAAI,CAACN,KAAK,IAAI,mBAAmB,CAAC;IAClD;EACF,CAAC,MAAM,IAAIA,KAAK,CAACL,OAAO,EAAE;IACxB;IACAV,KAAK,CAACe,KAAK,CAAC,8CAA8C,CAAC;EAC7D,CAAC,MAAM;IACL;IACAf,KAAK,CAACe,KAAK,CAAC,8BAA8B,CAAC;EAC7C;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAG;EACxB;EACAC,WAAW,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKvB,GAAG,CAACwB,GAAG,CAAC,eAAe,EAAE;IAAED;EAAO,CAAC,CAAC;EAElE;EACAE,WAAW,EAAEA,CAACC,QAAQ,EAAEC,KAAK,GAAG,EAAE,KAChC3B,GAAG,CAACwB,GAAG,CAAC,wBAAwB,EAAE;IAAED,MAAM,EAAE;MAAEG,QAAQ;MAAEC;IAAM;EAAE,CAAC,CAAC;EAEpE;EACAC,aAAa,EAAEA,CAACC,QAAQ,EAAEH,QAAQ,KAChC1B,GAAG,CAACwB,GAAG,CAAC,0BAA0BK,QAAQ,EAAE,EAAE;IAAEN,MAAM,EAAE;MAAEG;IAAS;EAAE,CAAC,CAAC;EAEzE;EACAI,UAAU,EAAEA,CAACC,OAAO,EAAEL,QAAQ,KAC5B1B,GAAG,CAACwB,GAAG,CAAC,iBAAiBO,OAAO,EAAE,EAAE;IAAER,MAAM,EAAE;MAAEG;IAAS;EAAE,CAAC,CAAC;EAE/D;EACAM,aAAa,EAAEA,CAACD,OAAO,EAAEL,QAAQ,EAAEO,IAAI,GAAG,CAAC,KACzCjC,GAAG,CAACwB,GAAG,CAAC,iBAAiBO,OAAO,aAAa,EAAE;IAC7CR,MAAM,EAAE;MAAEG,QAAQ;MAAEO;IAAK;EAC3B,CAAC,CAAC;EAEJ;EACAC,MAAM,EAAEA,CAACC,KAAK,EAAET,QAAQ,EAAEC,KAAK,GAAG,EAAE,KAClC3B,GAAG,CAACwB,GAAG,CAAC,wBAAwBW,KAAK,EAAE,EAAE;IAAEZ,MAAM,EAAE;MAAEG,QAAQ;MAAEC;IAAM;EAAE,CAAC,CAAC;EAE3E;EACAS,QAAQ,EAAEA,CAAA,KAAMpC,GAAG,CAACwB,GAAG,CAAC,8BAA8B;AACxD,CAAC;AAED,OAAO,MAAMa,cAAc,GAAG;EAC5B;EACAC,kBAAkB,EAAEA,CAACC,KAAK,GAAG,CAAC,KAC5BvC,GAAG,CAACwB,GAAG,CAAC,oCAAoC,EAAE;IAAED,MAAM,EAAE;MAAEgB;IAAM;EAAE,CAAC,CAAC;EAEtE;EACAC,kBAAkB,EAAEA,CAACC,UAAU,GAAG,IAAI,EAAEC,UAAU,GAAG,EAAE,KACrD1C,GAAG,CAACwB,GAAG,CAAC,oCAAoC,EAAE;IAC5CD,MAAM,EAAE;MAAEkB,UAAU;MAAEC;IAAW;EACnC,CAAC,CAAC;EAEJ;EACAC,cAAc,EAAEA,CAACZ,OAAO,EAAEa,KAAK,GAAG,GAAG,KACnC5C,GAAG,CAACwB,GAAG,CAAC,6BAA6BO,OAAO,EAAE,EAAE;IAAER,MAAM,EAAE;MAAEqB;IAAM;EAAE,CAAC,CAAC;EAExE;EACAC,cAAc,EAAEA,CAACd,OAAO,EAAEW,UAAU,GAAG,EAAE,KACvC1C,GAAG,CAACwB,GAAG,CAAC,6BAA6BO,OAAO,EAAE,EAAE;IAAER,MAAM,EAAE;MAAEmB;IAAW;EAAE,CAAC,CAAC;EAE7E;EACAI,gBAAgB,EAAEA,CAACf,OAAO,EAAEgB,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,KAC5D/C,GAAG,CAACgD,IAAI,CAAC,2BAA2BjB,OAAO,EAAE,EAAE;IAAEgB;EAAU,CAAC,CAAC;EAE/D;EACAE,gBAAgB,EAAGlB,OAAO,IACxB/B,GAAG,CAACwB,GAAG,CAAC,6BAA6BO,OAAO,EAAE;AAClD,CAAC;AAED,OAAO,MAAMmB,YAAY,GAAG;EAC1B;EACAC,SAAS,EAAEA,CAACpB,OAAO,EAAEL,QAAQ,EAAEO,IAAI,GAAG,EAAE,KACtCjC,GAAG,CAACwB,GAAG,CAAC,yBAAyBO,OAAO,EAAE,EAAE;IAAER,MAAM,EAAE;MAAEG,QAAQ;MAAEO;IAAK;EAAE,CAAC,CAAC;EAE7E;EACAmB,cAAc,EAAEA,CAACrB,OAAO,EAAEL,QAAQ,KAChC1B,GAAG,CAACwB,GAAG,CAAC,8BAA8BO,OAAO,EAAE,EAAE;IAAER,MAAM,EAAE;MAAEG;IAAS;EAAE,CAAC,CAAC;EAE5E;EACA2B,aAAa,EAAEA,CAAC3B,QAAQ,EAAEO,IAAI,GAAG,CAAC,KAChCjC,GAAG,CAACwB,GAAG,CAAC,2BAA2B,EAAE;IAAED,MAAM,EAAE;MAAEG,QAAQ;MAAEO;IAAK;EAAE,CAAC,CAAC;EAEtE;EACAqB,qBAAqB,EAAEA,CAACrB,IAAI,GAAG,CAAC,KAC9BjC,GAAG,CAACwB,GAAG,CAAC,qCAAqC,EAAE;IAAED,MAAM,EAAE;MAAEU;IAAK;EAAE,CAAC,CAAC;EAEtE;EACAsB,YAAY,EAAEA,CAAC7B,QAAQ,EAAEG,QAAQ,EAAEI,IAAI,GAAG,CAAC,KACzCjC,GAAG,CAACwB,GAAG,CAAC,0BAA0B,EAAE;IAClCD,MAAM,EAAE;MAAEG,QAAQ;MAAEG,QAAQ;MAAEI;IAAK;EACrC,CAAC,CAAC;EAEJ;EACAuB,SAAS,EAAEA,CAAC9B,QAAQ,EAAEG,QAAQ,EAAEI,IAAI,GAAG,EAAE,KACvCjC,GAAG,CAACwB,GAAG,CAAC,uBAAuB,EAAE;IAAED,MAAM,EAAE;MAAEG,QAAQ;MAAEG,QAAQ;MAAEI;IAAK;EAAE,CAAC;AAC7E,CAAC;;AAED;AACA,OAAO,MAAMwB,WAAW,GAAGA,CAAA,KAAMzD,GAAG,CAACwB,GAAG,CAAC,aAAa,CAAC;AAEvD,SAASxB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}